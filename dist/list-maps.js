"use strict";
/// <reference types="jquery" />
var ListMaps;
(function (ListMaps) {
    var SummaryRow = /** @class */ (function () {
        function SummaryRow(data) {
            this.data = data;
            this.approved_status = data[0], this.approved_date = data[1], this.mode = data[2], this.beatmap_id = data[3], this.beatmapset_id = data[4], this.display_string = data[5], this.stars = data[6], this.pp = data[7], this.hit_length = data[8], this.max_combo = data[9], this.approach_rate = data[10], this.circle_size = data[11], this.min_misses = data[12], this.fcNM = data[13], this.fcHD = data[14], this.fcHR = data[15], this.fcHDHR = data[16], this.fcDT = data[17], this.fcHDDT = data[18];
            this.display_string_lower = this.display_string.toLowerCase();
        }
        return SummaryRow;
    }());
    var summaryRows = [];
    var unsortedTableRows = [];
    var currentOrderingIndices = [];
    var previousIndices = '';
    function drawTable(indices) {
        var str = indices.join(',');
        if (previousIndices === str)
            return;
        previousIndices = str;
        $('#summary-table > tbody')
            .html('')
            .append(indices.map(function (index) { return unsortedTableRows[index]; }));
    }
    var SearchQuery = /** @class */ (function () {
        function SearchQuery(source) {
            this.source = source;
            var key_to_property_name = {
                'status': 'approved_status',
                'mode': 'mode',
                'stars': 'stars',
                'pp': 'pp',
                'length': 'hit_length',
                'combo': 'max_combo',
                'ar': 'approach_rate',
                'cs': 'circle_size',
            };
            var check_func_source = 'return true';
            this.hash_str = '';
            for (var _i = 0, _a = source.split(' '); _i < _a.length; _i++) {
                var token = _a[_i];
                var trimmed = token.trim();
                if (trimmed === '')
                    continue;
                var match = /(status|mode|stars|pp|length|combo|ar|cs)(<|<=|>|>=|=|!=)([-\d\.]+)/.exec(trimmed);
                if (match) {
                    var key = match[1];
                    var rel = match[2] === '=' ? '==' : match[2];
                    var val = parseFloat(match[3]);
                    if (isNaN(val))
                        continue;
                    var prop = key_to_property_name[key];
                    this.hash_str += ' ' + prop + ' ' + rel + ' ' + val;
                    check_func_source += "&&row." + prop + rel + val;
                }
                else {
                    var str = trimmed.toLowerCase();
                    var escaped = JSON.stringify(str);
                    this.hash_str += ' ' + escaped;
                    check_func_source += "&&row.display_string_lower.indexOf(" + escaped + ")!==-1";
                }
            }
            this.check = new Function('row', check_func_source);
        }
        return SearchQuery;
    }());
    function drawTableForCurrentFiltering() {
        var filter_approved_status = parseInt($('*[name="filter_approved_status"]').val());
        var filter_mode = $('*[name="filter_mode"]').val();
        var filter_search_query = new SearchQuery($('*[name="filter_search_query"]').val());
        var filter_fc_level = parseInt($('*[name="filter_fc_level"]').val());
        var filter_expression = $('*[name="filter_expression"]').val();
        var get_fc_level = function (row) {
            if (row.min_misses !== 0)
                return 1;
            if (row.fcDT !== 0 || row.fcHDDT !== 0)
                return 8;
            if (row.fcNM === 0 && row.fcHD === 0 && row.fcHR === 0 && row.fcHDHR === 0)
                return 2;
            if (row.fcNM === 0 && row.fcHD === 0)
                return 3;
            if (row.fcHD === 0)
                return 4;
            if (row.fcHR === 0 && row.fcHDHR === 0)
                return 5;
            if (row.fcHDHR === 0)
                return 6;
            return 7;
        };
        var indices = currentOrderingIndices.filter(function (index) {
            var row = summaryRows[index];
            if (filter_approved_status === 1 &&
                (row.approved_status !== 1 && row.approved_status !== 2))
                return false;
            if (filter_approved_status === 2 && row.approved_status !== 4)
                return false;
            if (filter_mode === '1' && row.mode !== 0)
                return false;
            if (filter_mode === '2' && row.mode !== 2)
                return false;
            if (!filter_search_query.check(row))
                return false;
            if (filter_fc_level !== 0 && get_fc_level(row) !== filter_fc_level)
                return false;
            return true;
        });
        drawTable(indices);
    }
    $(function () {
        var onChange = function () {
            drawTableForCurrentFiltering();
        };
        for (var _i = 0, _a = ['filter_approved_status', 'filter_mode', 'filter_fc_level']; _i < _a.length; _i++) {
            var name_1 = _a[_i];
            $("select[name=\"" + name_1 + "\"]").on('change', onChange);
        }
        for (var _b = 0, _c = ['filter_search_query']; _b < _c.length; _b++) {
            var name_2 = _c[_b];
            $("input[name=\"" + name_2 + "\"]").on('input', onChange);
        }
        var thList = $('#summary-table > thead > tr > th');
        [
            function (x) { return x.approved_date; },
            function (x) { return x.display_string; },
            function (x) { return x.stars; },
            function (x) { return x.pp; },
            function (x) { return x.hit_length; },
            function (x) { return x.max_combo; },
            function (x) { return x.approach_rate; },
            function (x) { return x.circle_size; },
            function (x) {
                return x.fcHDDT * 2 + x.fcDT * 1e8 +
                    x.fcHDHR * 2 + x.fcHR * 1e4 +
                    x.fcHD * 2 + x.fcNM -
                    x.min_misses;
            },
        ].forEach(function (sortKey, index) {
            $.data(thList[index], 'sortKey', sortKey);
        });
        $.getJSON('data/summary.json').then(function (data, _, xhr) {
            var last_modified = new Date(xhr.getResponseHeader('Last-Modified'));
            $('#last-update-time')
                .attr('datetime', last_modified.toISOString())
                .text(last_modified.toISOString().split('T')[0]);
            var pad = function (x) { return (x < 10 ? '0' : '') + x; };
            var mode_icons = [
                'exchange icon',
                '',
                'theme icon',
                '',
            ];
            var approved_status_icons = [
                'help icon',
                'angle double up icon',
                'fire icon',
                'checkmark icon',
                'empty heart icon',
            ];
            summaryRows = data.map(function (x) { return new SummaryRow(x); });
            unsortedTableRows = summaryRows.map(function (row) {
                return $('<tr>').append([
                    [
                        $('<i>').addClass(approved_status_icons[row.approved_status]),
                        document.createTextNode(row.approved_date.split(' ')[0])
                    ],
                    [
                        $('<i>').addClass(mode_icons[row.mode]),
                        $('<a>')
                            .attr('href', "https://osu.ppy.sh/b/" + row.beatmap_id + "?m=2")
                            .text(row.display_string),
                        $('<div style="float:right">').append([
                            $('<a><i class="image icon">')
                                .attr('href', "https://b.ppy.sh/thumb/" + row.beatmapset_id + ".jpg"),
                            $('<a><i class="download icon">')
                                .attr('href', "https://osu.ppy.sh/d/" + row.beatmapset_id + "n")
                        ])
                    ],
                    row.stars.toFixed(2),
                    row.pp.toFixed(0),
                    Math.floor(row.hit_length / 60) + ":" + pad(Math.floor(row.hit_length % 60)),
                    row.max_combo.toString(),
                    row.approach_rate.toFixed(1),
                    row.circle_size.toFixed(1),
                    row.min_misses !== 0 ? (row.min_misses === 1 ? '1 miss' : row.min_misses + ' misses') :
                        [row.fcNM, row.fcHD, row.fcHR, row.fcHDHR, row.fcDT, row.fcHDDT].join(' / ')
                ].map(function (x) { return $('<td>').append(x); }))[0];
            });
            currentOrderingIndices = summaryRows.map(function (_, index) { return index; });
            drawTableForCurrentFiltering();
            $('#summary-table-loader').removeClass('active');
        });
        thList.click(function (event) {
            var th = $(event.target);
            thList.filter('.sorted')
                .filter(function (_, x) { return x !== event.target; })
                .removeClass('sorted descending ascending');
            if (th.hasClass('sorted'))
                th.toggleClass('descending ascending');
            else
                th.addClass('sorted')
                    .addClass(th.hasClass('desc-first') ? 'descending' : 'ascending');
            var sortKey = th.data('sortKey');
            var sign = th.hasClass('descending') ? -1 : 1;
            currentOrderingIndices.sort(function (x, y) {
                var kx = sortKey(summaryRows[x]);
                var ky = sortKey(summaryRows[y]);
                return (kx < ky ? -1 : kx > ky ? 1 : 0) * sign;
            });
            drawTableForCurrentFiltering();
        });
    });
})(ListMaps || (ListMaps = {}));
//# sourceMappingURL=data:application/json;base64,