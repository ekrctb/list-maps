"use strict";
/// <reference types="jquery" />
var ListMaps;
(function (ListMaps) {
    var SummaryRow = /** @class */ (function () {
        function SummaryRow(data) {
            this.data = data;
            this.approved_status = data[0], this.approved_date = data[1], this.mode = data[2], this.beatmap_id = data[3], this.beatmapset_id = data[4], this.display_string = data[5], this.stars = data[6], this.pp = data[7], this.hit_length = data[8], this.max_combo = data[9], this.approach_rate = data[10], this.circle_size = data[11], this.min_misses = data[12], this.fcNM = data[13], this.fcHD = data[14], this.fcHR = data[15], this.fcHDHR = data[16], this.fcDT = data[17], this.fcHDDT = data[18];
            this.display_string_lower = this.display_string.toLowerCase();
        }
        return SummaryRow;
    }());
    var summaryRows = [];
    var unsortedTableRows = [];
    var currentSortOrder = [];
    var currentHashLink = '#';
    var previousIndices = '';
    function drawTable(indices) {
        var str = indices.join(',');
        if (previousIndices === str)
            return;
        previousIndices = str;
        $('#summary-table > tbody')
            .html('')
            .append(indices.map(function (index) { return unsortedTableRows[index]; }));
    }
    var SearchQuery = /** @class */ (function () {
        function SearchQuery(source) {
            this.source = source;
            var key_to_property_name = {
                'status': 'approved_status',
                'mode': 'mode',
                'stars': 'stars',
                'pp': 'pp',
                'length': 'hit_length',
                'combo': 'max_combo',
                'ar': 'approach_rate',
                'cs': 'circle_size',
            };
            var check_func_source = 'return true';
            this.normalized_source = '';
            for (var _i = 0, _a = source.split(' '); _i < _a.length; _i++) {
                var token = _a[_i];
                var trimmed = token.trim();
                if (trimmed === '')
                    continue;
                var match = /(status|mode|stars|pp|length|combo|ar|cs)(<|<=|>|>=|=|!=)([-\d\.]+)/.exec(trimmed);
                if (match) {
                    var key = match[1];
                    var rel = match[2] === '=' ? '==' : match[2];
                    var val = parseFloat(match[3]);
                    if (isNaN(val))
                        continue;
                    var prop = key_to_property_name[key];
                    if (this.normalized_source !== '')
                        this.normalized_source += ' ';
                    this.normalized_source += match[1] + match[2] + match[3];
                    check_func_source += "&&row." + prop + rel + val;
                }
                else {
                    var str = trimmed.toLowerCase();
                    var escaped = JSON.stringify(str);
                    if (this.normalized_source !== '')
                        this.normalized_source += ' ';
                    this.normalized_source += str;
                    check_func_source += "&&row.display_string_lower.indexOf(" + escaped + ")!==-1";
                }
            }
            this.check = new Function('row', check_func_source);
        }
        return SearchQuery;
    }());
    var sortKeys = [
        function (x) { return x.approved_date; },
        function (x) { return x.display_string; },
        function (x) { return x.stars; },
        function (x) { return x.pp; },
        function (x) { return x.hit_length; },
        function (x) { return x.max_combo; },
        function (x) { return x.approach_rate; },
        function (x) { return x.circle_size; },
        function (x) {
            return x.fcHDDT * 2 + x.fcDT * 1e8 +
                x.fcHDHR * 2 + x.fcHR * 1e4 +
                x.fcHD * 2 + x.fcNM -
                x.min_misses;
        },
    ];
    function stringifyObject(obj) {
        return Object.keys(obj)
            .map(function (k) { return k + '=' + encodeURIComponent(obj[k]); })
            .join('&');
    }
    function parseObject(str) {
        var res = {};
        str.split('&').forEach(function (part) {
            var match = part.match(/(\w+)=(.+)/);
            if (match)
                res[match[1]] = decodeURIComponent(match[2]);
        });
        return res;
    }
    function drawTableForCurrentFiltering() {
        var filter_approved_status = parseInt($('*[name="filter_approved_status"]').val());
        var filter_mode = parseInt($('*[name="filter_mode"]').val());
        var filter_search_query = new SearchQuery($('*[name="filter_search_query"]').val());
        var filter_fc_level = parseInt($('*[name="filter_fc_level"]').val());
        var get_fc_level = function (row) {
            if (row.min_misses !== 0)
                return 1;
            if (row.fcDT !== 0 || row.fcHDDT !== 0)
                return 8;
            if (row.fcNM === 0 && row.fcHD === 0 && row.fcHR === 0 && row.fcHDHR === 0)
                return 2;
            if (row.fcNM === 0 && row.fcHD === 0)
                return 3;
            if (row.fcHD === 0)
                return 4;
            if (row.fcHR === 0 && row.fcHDHR === 0)
                return 5;
            if (row.fcHDHR === 0)
                return 6;
            return 7;
        };
        currentHashLink = '#';
        var obj = {};
        if (filter_approved_status !== 1)
            obj.s = filter_approved_status.toString();
        if (filter_mode !== 1)
            obj.m = filter_mode.toString();
        if (filter_search_query.normalized_source !== '')
            obj.q = filter_search_query.normalized_source;
        if (filter_fc_level !== 0)
            obj.l = filter_fc_level.toString();
        if (currentSortOrder.length !== 0)
            obj.o = currentSortOrder.join('.');
        currentHashLink += stringifyObject(obj);
        if (currentHashLink === '#')
            history.replaceState({}, document.title, location.pathname);
        else
            location.hash = currentHashLink;
        var indices = summaryRows.map(function (_, index) { return index; }).filter(function (index) {
            var row = summaryRows[index];
            if (filter_approved_status === 1 &&
                (row.approved_status !== 1 && row.approved_status !== 2))
                return false;
            if (filter_approved_status === 2 && row.approved_status !== 4)
                return false;
            if (filter_mode === 1 && row.mode !== 0)
                return false;
            if (filter_mode === 2 && row.mode !== 2)
                return false;
            if (!filter_search_query.check(row))
                return false;
            if (filter_fc_level !== 0 && get_fc_level(row) !== filter_fc_level)
                return false;
            return true;
        });
        var _loop_1 = function (ord) {
            if (ord === 0)
                return "continue";
            var prevIndex = Array(indices.length);
            indices.forEach(function (x, i) { return prevIndex[x] = i; });
            var sortKey = sortKeys[Math.abs(ord) - 1];
            var sign = ord > 0 ? 1 : -1;
            indices.sort(function (x, y) {
                var kx = sortKey(summaryRows[x]);
                var ky = sortKey(summaryRows[y]);
                return kx < ky ? -sign : kx > ky ? sign : prevIndex[y] - prevIndex[x];
            });
        };
        for (var _i = 0, currentSortOrder_1 = currentSortOrder; _i < currentSortOrder_1.length; _i++) {
            var ord = currentSortOrder_1[_i];
            _loop_1(ord);
        }
        $('#hash-link-to-the-current-table').attr('href', currentHashLink);
        drawTable(indices);
    }
    function simplySortOrder(order) {
        var res = [];
        var seen = Array(sortKeys.length);
        for (var i = order.length - 1; i >= 0; --i) {
            var x = order[i];
            if (x === 0)
                continue;
            var key = Math.abs(x) - 1, sign = x > 0 ? 1 : -1;
            if (seen[key])
                continue;
            seen[key] = sign;
            res.push(x);
            if ([0, 1, 2, 3, 4, 5].indexOf(key) !== -1)
                break;
        }
        if (res.length !== 0 && res[res.length - 1] === -3)
            res.pop();
        res.reverse();
        return res;
    }
    function setQueryAccordingToHash() {
        var obj;
        try {
            obj = parseObject(location.hash.substr(1));
        }
        catch (e) {
            obj = {};
        }
        if (typeof (obj.s) === 'undefined')
            obj.s = '1';
        if (typeof (obj.m) === 'undefined')
            obj.m = '1';
        if (typeof (obj.q) === 'undefined')
            obj.q = '';
        if (typeof (obj.l) === 'undefined')
            obj.l = '0';
        if (typeof (obj.o) === 'undefined')
            obj.o = '';
        $('*[name="filter_approved_status"]').val(parseInt(obj.s));
        $('*[name="filter_mode"]').val(parseInt(obj.m));
        $('*[name="filter_search_query"]').val(obj.q);
        $('*[name="filter_fc_level"]').val(parseInt(obj.l));
        currentSortOrder = simplySortOrder(obj.o.split('.').map(function (x) { return parseInt(x) || 0; }));
        setTableHeadSortingMark();
    }
    function setTableHeadSortingMark() {
        $('.sorted').removeClass('sorted ascending descending');
        var x = currentSortOrder.length === 0 ?
            -3 : // stars desc
            currentSortOrder[currentSortOrder.length - 1];
        var index = Math.abs(x) - 1;
        $($('#summary-table > thead > tr > th')[index])
            .addClass('sorted').addClass(x > 0 ? 'ascending' : 'descending');
    }
    $(function () {
        setQueryAccordingToHash();
        window.addEventListener('hashchange', function () {
            setQueryAccordingToHash();
            drawTableForCurrentFiltering();
        });
        var onChange = function () {
            drawTableForCurrentFiltering();
        };
        for (var _i = 0, _a = ['filter_approved_status', 'filter_mode', 'filter_fc_level']; _i < _a.length; _i++) {
            var name_1 = _a[_i];
            $("select[name=\"" + name_1 + "\"]").on('change', onChange);
        }
        for (var _b = 0, _c = ['filter_search_query']; _b < _c.length; _b++) {
            var name_2 = _c[_b];
            $("input[name=\"" + name_2 + "\"]").on('input', onChange);
        }
        var thList = $('#summary-table > thead > tr > th');
        sortKeys.forEach(function (_, index) {
            $.data(thList[index], 'thIndex', index);
        });
        $.getJSON('data/summary.json').then(function (data, _, xhr) {
            var last_modified = new Date(xhr.getResponseHeader('Last-Modified'));
            $('#last-update-time')
                .attr('datetime', last_modified.toISOString())
                .text(last_modified.toISOString().split('T')[0]);
            var pad = function (x) { return (x < 10 ? '0' : '') + x; };
            var mode_icons = [
                'exchange icon',
                '',
                'theme icon',
                '',
            ];
            var approved_status_icons = [
                'help icon',
                'angle double up icon',
                'fire icon',
                'checkmark icon',
                'empty heart icon',
            ];
            summaryRows = data.map(function (x) { return new SummaryRow(x); });
            unsortedTableRows = summaryRows.map(function (row) {
                return $('<tr>').append([
                    [
                        $('<i>').addClass(approved_status_icons[row.approved_status]),
                        document.createTextNode(row.approved_date.split(' ')[0])
                    ],
                    [
                        $('<i>').addClass(mode_icons[row.mode]),
                        $('<a>')
                            .attr('href', "https://osu.ppy.sh/b/" + row.beatmap_id + "?m=2")
                            .text(row.display_string),
                        $('<div style="float:right">').append([
                            $('<a><i class="image icon">')
                                .attr('href', "https://b.ppy.sh/thumb/" + row.beatmapset_id + ".jpg"),
                            $('<a><i class="download icon">')
                                .attr('href', "https://osu.ppy.sh/d/" + row.beatmapset_id + "n")
                        ])
                    ],
                    row.stars.toFixed(2),
                    row.pp.toFixed(0),
                    Math.floor(row.hit_length / 60) + ":" + pad(Math.floor(row.hit_length % 60)),
                    row.max_combo.toString(),
                    row.approach_rate.toFixed(1),
                    row.circle_size.toFixed(1),
                    row.min_misses !== 0 ? (row.min_misses === 1 ? '1 miss' : row.min_misses + ' misses') :
                        [row.fcNM, row.fcHD, row.fcHR, row.fcHDHR, row.fcDT, row.fcHDDT].join(', ')
                ].map(function (x) { return $('<td>').append(x); }))[0];
            });
            drawTableForCurrentFiltering();
            $('#summary-table-loader').removeClass('active');
        });
        thList.click(function (event) {
            var th = $(event.target);
            var sign;
            if (th.hasClass('sorted'))
                sign = th.hasClass('descending') ? 1 : -1;
            else
                sign = th.hasClass('desc-first') ? -1 : 1;
            var thIndex = th.data('thIndex');
            currentSortOrder.push((thIndex + 1) * sign);
            currentSortOrder = simplySortOrder(currentSortOrder);
            setTableHeadSortingMark();
            drawTableForCurrentFiltering();
        });
    });
})(ListMaps || (ListMaps = {}));
//# sourceMappingURL=data:application/json;base64,